# 工作流名称
name: Docker镜像转存到阿里云私有仓库

# 触发条件：手动触发
on: 
  workflow_dispatch:

# 环境变量
env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"  # 阿里云镜像仓库地址
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"  # 阿里云命名空间
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"  # 阿里云镜像仓库用户名
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"  # 阿里云镜像仓库密码

# 任务定义
jobs:
  build:
    name: Pull and Push Images  # 任务名称
    runs-on: ubuntu-latest  # 运行环境

    steps:
    - name: Docker Setup Buildx  # 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3  # 使用 Docker Buildx 动作

    - name: Checkout Code  # 检出代码
      uses: actions/checkout@v4  # 使用 GitHub Actions Checkout 动作

    - name: Login to Aliyun Registry  # 登录阿里云镜像仓库
      run: |
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY  # 执行登录命令

    - name: Process Images  # 处理镜像
      id: process_images  # 步骤 ID
      run: |
        declare -A duplicate_image_names  # 声明重复镜像名称数组
        declare -A namespace_map  # 声明命名空间映射数组
        while IFS= read -r line; do  # 逐行读取 images.txt 文件
          [[ -z "$line" || "$line" =~ ^\s*# ]] && continue  # 跳过空行和注释行
          parse_image_info "$line"  # 解析镜像信息
          if [[ -n "${namespace_map[$image_name]}" && "${namespace_map[$image_name]}" != "$namespace" ]]; then  # 检查是否有重复的镜像名称
            echo "Duplicate image name: $image_name"  # 输出重复的镜像名称
            duplicate_image_names[$image_name]="true"  # 记录重复的镜像名称
          else
            namespace_map[$image_name]=$namespace  # 记录镜像名称和命名空间的映射关系
          fi
        done < images.txt
        echo "::set-output name=duplicate_image_names::${!duplicate_image_names[@]}"  # 输出重复的镜像名称
        echo "::set-output name=namespace_map::${!namespace_map[@]}"  # 输出命名空间映射

    - name: Pull and Push Images  # 拉取并推送镜像
      run: |
        while IFS= read -r line; do  # 逐行读取 images.txt 文件
          [[ -z "$line" || "$line" =~ ^\s*# ]] && continue  # 跳过空行和注释行
          parse_image_info "$line"  # 解析镜像信息
          if [[ -n "${duplicate_image_names[$image_name]}" && -n "$namespace" ]]; then  # 检查是否有重复的镜像名称
            namespace_prefix="${namespace}_"  # 添加命名空间前缀
          fi
          new_image_name="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${platform_prefix}${namespace_prefix}${image_name_with_tag}"  # 构建新的镜像名称
          echo "Docker Pull: $line"  # 输出拉取镜像的命令
          docker pull "$line" || exit 1  # 拉取镜像，失败则退出
          echo "Docker Tag: $full_image_name -> $new_image_name"  # 输出打标签的命令
          docker tag "$full_image_name" "$new_image_name" || exit 1  # 打标签，失败则退出
          echo "Docker Push: $new_image_name"  # 输出推送镜像的命令
          docker push "$new_image_name" || exit 1  # 推送镜像，失败则退出
        done < images.txt
      env:
        duplicate_image_names: ${{ steps.process_images.outputs.duplicate_image_names }}  # 传递重复镜像名称
        namespace_map: ${{ steps.process_images.outputs.namespace_map }}  # 传递命名空间映射

    - name: Parse Image Info  # 解析镜像信息
      shell: bash  # 使用 Bash shell
      run: |
        full_image_name=$(echo "$1" | awk '{print $NF}')  # 获取完整的镜像名称
        full_image_name="${full_image_name%%@*}"  # 去掉 @ 后的部分
        image_name_with_tag=$(echo "$full_image_name" | awk -F'/' '{print $NF}')  # 获取镜像名称和标签
        namespace=$(echo "$full_image_name" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')  # 获取命名空间
        namespace="${namespace:-default}"  # 如果没有命名空间，默认为 default
        image_name=$(echo "$image_name_with_tag" | awk -F':' '{print $1}')  # 获取镜像名称
        platform=$(echo "$1" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')  # 获取平台信息
        platform_prefix="${platform//\//_}_"  # 构建平台前缀
        echo "Full Image Name: $full_image_name"  # 输出完整的镜像名称
        echo "Image Name with Tag: $image_name_with_tag"  # 输出镜像名称和标签
        echo "Namespace: $namespace"  # 输出命名空间
        echo "Image Name: $image_name"  # 输出镜像名称
        echo "Platform: $platform"  # 输出平台信息
        echo "Platform Prefix: $platform_prefix"  # 输出平台前缀
        echo "export full_image_name=$full_image_name"  # 导出完整的镜像名称
        echo "export image_name_with_tag=$image_name_with_tag"  # 导出镜像名称和标签
        echo "export namespace=$namespace"  # 导出命名空间
        echo "export image_name=$image_name"  # 导出镜像名称
        echo "export platform_prefix=$platform_prefix"  # 导出平台前缀
      id: parse_image_info  # 步骤 ID
      env:
        1: ${{ github.event.inputs.image_line }}  # 传递输入的镜像行